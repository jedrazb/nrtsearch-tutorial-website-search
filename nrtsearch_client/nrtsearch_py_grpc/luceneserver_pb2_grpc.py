# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.api import httpbody_pb2 as google_dot_api_dot_httpbody__pb2
from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from yelp.nrtsearch import luceneserver_pb2 as yelp_dot_nrtsearch_dot_luceneserver__pb2
from yelp.nrtsearch import search_pb2 as yelp_dot_nrtsearch_dot_search__pb2
from yelp.nrtsearch import suggest_pb2 as yelp_dot_nrtsearch_dot_suggest__pb2


class LuceneServerStub(object):
    """The LuceneServer service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.createIndex = channel.unary_unary(
                '/luceneserver.LuceneServer/createIndex',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateIndexRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateIndexResponse.FromString,
                )
        self.liveSettings = channel.unary_unary(
                '/luceneserver.LuceneServer/liveSettings',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsResponse.FromString,
                )
        self.liveSettingsV2 = channel.unary_unary(
                '/luceneserver.LuceneServer/liveSettingsV2',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsV2Request.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsV2Response.FromString,
                )
        self.registerFields = channel.unary_unary(
                '/luceneserver.LuceneServer/registerFields',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefResponse.FromString,
                )
        self.updateFields = channel.unary_unary(
                '/luceneserver.LuceneServer/updateFields',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefResponse.FromString,
                )
        self.settings = channel.unary_unary(
                '/luceneserver.LuceneServer/settings',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsResponse.FromString,
                )
        self.settingsV2 = channel.unary_unary(
                '/luceneserver.LuceneServer/settingsV2',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsV2Request.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsV2Response.FromString,
                )
        self.startIndex = channel.unary_unary(
                '/luceneserver.LuceneServer/startIndex',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexResponse.FromString,
                )
        self.startIndexV2 = channel.unary_unary(
                '/luceneserver.LuceneServer/startIndexV2',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexV2Request.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexResponse.FromString,
                )
        self.stopIndex = channel.unary_unary(
                '/luceneserver.LuceneServer/stopIndex',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StopIndexRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DummyResponse.FromString,
                )
        self.reloadState = channel.unary_unary(
                '/luceneserver.LuceneServer/reloadState',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReloadStateRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReloadStateResponse.FromString,
                )
        self.addDocuments = channel.stream_unary(
                '/luceneserver.LuceneServer/addDocuments',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.FromString,
                )
        self.refresh = channel.unary_unary(
                '/luceneserver.LuceneServer/refresh',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RefreshRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RefreshResponse.FromString,
                )
        self.commit = channel.unary_unary(
                '/luceneserver.LuceneServer/commit',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CommitRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CommitResponse.FromString,
                )
        self.stats = channel.unary_unary(
                '/luceneserver.LuceneServer/stats',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StatsRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StatsResponse.FromString,
                )
        self.search = channel.unary_unary(
                '/luceneserver.LuceneServer/search',
                request_serializer=yelp_dot_nrtsearch_dot_search__pb2.SearchRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_search__pb2.SearchResponse.FromString,
                )
        self.searchV2 = channel.unary_unary(
                '/luceneserver.LuceneServer/searchV2',
                request_serializer=yelp_dot_nrtsearch_dot_search__pb2.SearchRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_any__pb2.Any.FromString,
                )
        self.delete = channel.unary_unary(
                '/luceneserver.LuceneServer/delete',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.FromString,
                )
        self.deleteByQuery = channel.unary_unary(
                '/luceneserver.LuceneServer/deleteByQuery',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteByQueryRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.FromString,
                )
        self.deleteAll = channel.unary_unary(
                '/luceneserver.LuceneServer/deleteAll',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteAllDocumentsRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteAllDocumentsResponse.FromString,
                )
        self.deleteIndex = channel.unary_unary(
                '/luceneserver.LuceneServer/deleteIndex',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexResponse.FromString,
                )
        self.buildSuggest = channel.unary_unary(
                '/luceneserver.LuceneServer/buildSuggest',
                request_serializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestResponse.FromString,
                )
        self.suggestLookup = channel.unary_unary(
                '/luceneserver.LuceneServer/suggestLookup',
                request_serializer=yelp_dot_nrtsearch_dot_suggest__pb2.SuggestLookupRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_suggest__pb2.SuggestLookupResponse.FromString,
                )
        self.updateSuggest = channel.unary_unary(
                '/luceneserver.LuceneServer/updateSuggest',
                request_serializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestResponse.FromString,
                )
        self.createSnapshot = channel.unary_unary(
                '/luceneserver.LuceneServer/createSnapshot',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateSnapshotRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateSnapshotResponse.FromString,
                )
        self.releaseSnapshot = channel.unary_unary(
                '/luceneserver.LuceneServer/releaseSnapshot',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReleaseSnapshotRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReleaseSnapshotResponse.FromString,
                )
        self.getAllSnapshotIndexGen = channel.unary_unary(
                '/luceneserver.LuceneServer/getAllSnapshotIndexGen',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetAllSnapshotGenRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetAllSnapshotGenResponse.FromString,
                )
        self.backupIndex = channel.unary_unary(
                '/luceneserver.LuceneServer/backupIndex',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupIndexRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupIndexResponse.FromString,
                )
        self.deleteIndexBackup = channel.unary_unary(
                '/luceneserver.LuceneServer/deleteIndexBackup',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexBackupRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexBackupResponse.FromString,
                )
        self.backupWarmingQueries = channel.unary_unary(
                '/luceneserver.LuceneServer/backupWarmingQueries',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupWarmingQueriesRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupWarmingQueriesResponse.FromString,
                )
        self.state = channel.unary_unary(
                '/luceneserver.LuceneServer/state',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StateRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StateResponse.FromString,
                )
        self.status = channel.unary_unary(
                '/luceneserver.LuceneServer/status',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckResponse.FromString,
                )
        self.ready = channel.unary_unary(
                '/luceneserver.LuceneServer/ready',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReadyCheckRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckResponse.FromString,
                )
        self.metrics = channel.unary_unary(
                '/luceneserver.LuceneServer/metrics',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=google_dot_api_dot_httpbody__pb2.HttpBody.FromString,
                )
        self.indices = channel.unary_unary(
                '/luceneserver.LuceneServer/indices',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndicesRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndicesResponse.FromString,
                )
        self.forceMerge = channel.unary_unary(
                '/luceneserver.LuceneServer/forceMerge',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeResponse.FromString,
                )
        self.forceMergeDeletes = channel.unary_unary(
                '/luceneserver.LuceneServer/forceMergeDeletes',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeDeletesRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeDeletesResponse.FromString,
                )
        self.custom = channel.unary_unary(
                '/luceneserver.LuceneServer/custom',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CustomRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CustomResponse.FromString,
                )


class LuceneServerServicer(object):
    """The LuceneServer service definition.
    """

    def createIndex(self, request, context):
        """Create an Index 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def liveSettings(self, request, context):
        """Change global offline or online settings for this index. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def liveSettingsV2(self, request, context):
        """Change global offline or online settings for this index. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerFields(self, request, context):
        """Registers one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
        Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
        and once a field is registered it cannot be changed (write-once).
        This returns the full set of fields currently registered. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateFields(self, request, context):
        """Adds one or more fields.  Fields must be registered before they can be added in a document (via @addDocument).
        Pass a list of Fields and an indexName. Any number of fields may be registered in a single request,
        and once a field is registered it cannot be changed (write-once).
        This returns the full set of fields currently registered. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def settings(self, request, context):
        """Change global offline settings for this index.
        This returns the currently set settings; pass no settings changes to retrieve current settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def settingsV2(self, request, context):
        """Change global offline settings for this index.
        This returns the currently set settings; pass no settings to retrieve current settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startIndex(self, request, context):
        """Starts an index 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startIndexV2(self, request, context):
        """Starts an index using configuration in IndexStartConfig 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopIndex(self, request, context):
        """Stops an index 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reloadState(self, request, context):
        """Reload state from the backend 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addDocuments(self, request_iterator, context):
        """Adds a stream of Documents 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def refresh(self, request, context):
        """Refresh the latest searcher for an index 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def commit(self, request, context):
        """Commits all pending changes to durable storage
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stats(self, request, context):
        """Retrieve index statistics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def search(self, request, context):
        """Search 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def searchV2(self, request, context):
        """Search V2 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete(self, request, context):
        """Delete documents 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteByQuery(self, request, context):
        """Delete documents matching a query 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteAll(self, request, context):
        """Delete all documents for index 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteIndex(self, request, context):
        """Delete index 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buildSuggest(self, request, context):
        """Builds a new auto-suggester, loading suggestions via the provided local file path.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def suggestLookup(self, request, context):
        """Perform an auto-suggest lookup.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateSuggest(self, request, context):
        """Updates existing suggestions, if the suggester supports near-real-time changes. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def createSnapshot(self, request, context):
        """
        Creates a snapshot in the index, which is saved point-in-time view of the last commit
        in the index such that no files referenced by that snapshot will be deleted by ongoing
        indexing until the snapshot is released with @releaseSnapshot.  Note that this will
        reference the last commit, so be sure to call commit first if you have pending changes
        that you'd like to be included in the snapshot.
        This can be used for backup purposes, i.e. after creating the snapshot you can copy
        all referenced files to backup storage, and then release the snapshot once complete.
        To restore the backup, just copy all the files back and restart the server.
        It can also be used for transactional purposes, i.e. if you sometimes need to search a
        specific snapshot instead of the current live index. Creating a snapshot is very fast
        (does not require any file copying), but over time it will consume extra disk space as
        old segments are merged in the index.  Be sure to release the snapshot once you're done.
        Snapshots survive shutdown and restart of the server.  Returns all protected filenames
        referenced by this snapshot: these files will not change and will not be deleted until
        the snapshot is released.  This returns the directories and files referenced by the snapshot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def releaseSnapshot(self, request, context):
        """releases a snapshot previously created with @createSnapshot. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getAllSnapshotIndexGen(self, request, context):
        """Gets all unreleased index gens of snapshots previously created with @createSnapshot. 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def backupIndex(self, request, context):
        """backs up a resource (index) and it associated metadata e.g. settings, schema to s3 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteIndexBackup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def backupWarmingQueries(self, request, context):
        """Backup warming queries to S3 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def state(self, request, context):
        """Gets the state of a started index, includes settings, live_settings, search schema, suggest schema 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def status(self, request, context):
        """GET methods

        healthcheck 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ready(self, request, context):
        """
        Checks if a node is ready to receive traffic by checking if all the indices (which can be preloaded)
        are started. Can specify comma-separated list of index name to only check specific indices if needed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def metrics(self, request, context):
        """metrics  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def indices(self, request, context):
        """indices  
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def forceMerge(self, request, context):
        """
        Forces merge policy to merge segments until there are <= maxNumSegments. The actual
        merges to be executed are determined by the MergePolicy. This call will merge those
        segments present in the index when the call started. If other threads are still
        adding documents and flushing segments, those newly created segments will not be
        merged unless you call forceMerge again.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def forceMergeDeletes(self, request, context):
        """
        Forces merging of all segments that have deleted documents. The actual merges to be
        executed are determined by the MergePolicy. For example, the default TieredMergePolicy
        will only pick a segment if the percentage of deleted docs is over 10%.
        This method first flushes a new segment (if there are indexed documents), and applies
        all buffered deletes.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def custom(self, request, context):
        """
        Process request in a plugin which implements CustomRequestPlugin interface.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LuceneServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'createIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.createIndex,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateIndexRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateIndexResponse.SerializeToString,
            ),
            'liveSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.liveSettings,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsResponse.SerializeToString,
            ),
            'liveSettingsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.liveSettingsV2,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsV2Request.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsV2Response.SerializeToString,
            ),
            'registerFields': grpc.unary_unary_rpc_method_handler(
                    servicer.registerFields,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefResponse.SerializeToString,
            ),
            'updateFields': grpc.unary_unary_rpc_method_handler(
                    servicer.updateFields,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefResponse.SerializeToString,
            ),
            'settings': grpc.unary_unary_rpc_method_handler(
                    servicer.settings,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsResponse.SerializeToString,
            ),
            'settingsV2': grpc.unary_unary_rpc_method_handler(
                    servicer.settingsV2,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsV2Request.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsV2Response.SerializeToString,
            ),
            'startIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.startIndex,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexResponse.SerializeToString,
            ),
            'startIndexV2': grpc.unary_unary_rpc_method_handler(
                    servicer.startIndexV2,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexV2Request.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexResponse.SerializeToString,
            ),
            'stopIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.stopIndex,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StopIndexRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DummyResponse.SerializeToString,
            ),
            'reloadState': grpc.unary_unary_rpc_method_handler(
                    servicer.reloadState,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReloadStateRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReloadStateResponse.SerializeToString,
            ),
            'addDocuments': grpc.stream_unary_rpc_method_handler(
                    servicer.addDocuments,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.SerializeToString,
            ),
            'refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.refresh,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RefreshRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RefreshResponse.SerializeToString,
            ),
            'commit': grpc.unary_unary_rpc_method_handler(
                    servicer.commit,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CommitRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CommitResponse.SerializeToString,
            ),
            'stats': grpc.unary_unary_rpc_method_handler(
                    servicer.stats,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StatsRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StatsResponse.SerializeToString,
            ),
            'search': grpc.unary_unary_rpc_method_handler(
                    servicer.search,
                    request_deserializer=yelp_dot_nrtsearch_dot_search__pb2.SearchRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_search__pb2.SearchResponse.SerializeToString,
            ),
            'searchV2': grpc.unary_unary_rpc_method_handler(
                    servicer.searchV2,
                    request_deserializer=yelp_dot_nrtsearch_dot_search__pb2.SearchRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_any__pb2.Any.SerializeToString,
            ),
            'delete': grpc.unary_unary_rpc_method_handler(
                    servicer.delete,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.SerializeToString,
            ),
            'deleteByQuery': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteByQuery,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteByQueryRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.SerializeToString,
            ),
            'deleteAll': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteAll,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteAllDocumentsRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteAllDocumentsResponse.SerializeToString,
            ),
            'deleteIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteIndex,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexResponse.SerializeToString,
            ),
            'buildSuggest': grpc.unary_unary_rpc_method_handler(
                    servicer.buildSuggest,
                    request_deserializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestResponse.SerializeToString,
            ),
            'suggestLookup': grpc.unary_unary_rpc_method_handler(
                    servicer.suggestLookup,
                    request_deserializer=yelp_dot_nrtsearch_dot_suggest__pb2.SuggestLookupRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_suggest__pb2.SuggestLookupResponse.SerializeToString,
            ),
            'updateSuggest': grpc.unary_unary_rpc_method_handler(
                    servicer.updateSuggest,
                    request_deserializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestResponse.SerializeToString,
            ),
            'createSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.createSnapshot,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateSnapshotRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateSnapshotResponse.SerializeToString,
            ),
            'releaseSnapshot': grpc.unary_unary_rpc_method_handler(
                    servicer.releaseSnapshot,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReleaseSnapshotRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReleaseSnapshotResponse.SerializeToString,
            ),
            'getAllSnapshotIndexGen': grpc.unary_unary_rpc_method_handler(
                    servicer.getAllSnapshotIndexGen,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetAllSnapshotGenRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetAllSnapshotGenResponse.SerializeToString,
            ),
            'backupIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.backupIndex,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupIndexRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupIndexResponse.SerializeToString,
            ),
            'deleteIndexBackup': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteIndexBackup,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexBackupRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexBackupResponse.SerializeToString,
            ),
            'backupWarmingQueries': grpc.unary_unary_rpc_method_handler(
                    servicer.backupWarmingQueries,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupWarmingQueriesRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupWarmingQueriesResponse.SerializeToString,
            ),
            'state': grpc.unary_unary_rpc_method_handler(
                    servicer.state,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StateRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.StateResponse.SerializeToString,
            ),
            'status': grpc.unary_unary_rpc_method_handler(
                    servicer.status,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckResponse.SerializeToString,
            ),
            'ready': grpc.unary_unary_rpc_method_handler(
                    servicer.ready,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ReadyCheckRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckResponse.SerializeToString,
            ),
            'metrics': grpc.unary_unary_rpc_method_handler(
                    servicer.metrics,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=google_dot_api_dot_httpbody__pb2.HttpBody.SerializeToString,
            ),
            'indices': grpc.unary_unary_rpc_method_handler(
                    servicer.indices,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndicesRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndicesResponse.SerializeToString,
            ),
            'forceMerge': grpc.unary_unary_rpc_method_handler(
                    servicer.forceMerge,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeResponse.SerializeToString,
            ),
            'forceMergeDeletes': grpc.unary_unary_rpc_method_handler(
                    servicer.forceMergeDeletes,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeDeletesRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeDeletesResponse.SerializeToString,
            ),
            'custom': grpc.unary_unary_rpc_method_handler(
                    servicer.custom,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CustomRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CustomResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'luceneserver.LuceneServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LuceneServer(object):
    """The LuceneServer service definition.
    """

    @staticmethod
    def createIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/createIndex',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateIndexRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def liveSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/liveSettings',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def liveSettingsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/liveSettingsV2',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsV2Request.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.LiveSettingsV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerFields(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/registerFields',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateFields(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/updateFields',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.FieldDefResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def settings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/settings',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def settingsV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/settingsV2',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsV2Request.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.SettingsV2Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/startIndex',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startIndexV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/startIndexV2',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexV2Request.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StartIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stopIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/stopIndex',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StopIndexRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DummyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reloadState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/reloadState',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ReloadStateRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ReloadStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addDocuments(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/luceneserver.LuceneServer/addDocuments',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/refresh',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.RefreshRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.RefreshResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def commit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/commit',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CommitRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CommitResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def stats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/stats',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StatsRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StatsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/search',
            yelp_dot_nrtsearch_dot_search__pb2.SearchRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_search__pb2.SearchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def searchV2(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/searchV2',
            yelp_dot_nrtsearch_dot_search__pb2.SearchRequest.SerializeToString,
            google_dot_protobuf_dot_any__pb2.Any.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/delete',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteByQuery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/deleteByQuery',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteByQueryRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.AddDocumentResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteAll(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/deleteAll',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteAllDocumentsRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteAllDocumentsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/deleteIndex',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buildSuggest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/buildSuggest',
            yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def suggestLookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/suggestLookup',
            yelp_dot_nrtsearch_dot_suggest__pb2.SuggestLookupRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_suggest__pb2.SuggestLookupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateSuggest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/updateSuggest',
            yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_suggest__pb2.BuildSuggestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def createSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/createSnapshot',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateSnapshotRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CreateSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def releaseSnapshot(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/releaseSnapshot',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ReleaseSnapshotRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ReleaseSnapshotResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getAllSnapshotIndexGen(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/getAllSnapshotIndexGen',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.GetAllSnapshotGenRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.GetAllSnapshotGenResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def backupIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/backupIndex',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupIndexRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupIndexResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteIndexBackup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/deleteIndexBackup',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexBackupRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.DeleteIndexBackupResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def backupWarmingQueries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/backupWarmingQueries',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupWarmingQueriesRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.BackupWarmingQueriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/state',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StateRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.StateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/status',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ready(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/ready',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ReadyCheckRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def metrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/metrics',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            google_dot_api_dot_httpbody__pb2.HttpBody.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def indices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/indices',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.IndicesRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.IndicesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def forceMerge(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/forceMerge',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def forceMergeDeletes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/forceMergeDeletes',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeDeletesRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.ForceMergeDeletesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def custom(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.LuceneServer/custom',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CustomRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CustomResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReplicationServerStub(object):
    """The ReplicationServer service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.addReplicas = channel.unary_unary(
                '/luceneserver.ReplicationServer/addReplicas',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddReplicaRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddReplicaResponse.FromString,
                )
        self.recvCopyState = channel.unary_unary(
                '/luceneserver.ReplicationServer/recvCopyState',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyStateRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyState.FromString,
                )
        self.sendRawFile = channel.stream_unary(
                '/luceneserver.ReplicationServer/sendRawFile',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.FromString,
                )
        self.recvRawFile = channel.unary_stream(
                '/luceneserver.ReplicationServer/recvRawFile',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FileInfo.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.FromString,
                )
        self.recvRawFileV2 = channel.stream_stream(
                '/luceneserver.ReplicationServer/recvRawFileV2',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FileInfo.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.FromString,
                )
        self.copyFiles = channel.unary_stream(
                '/luceneserver.ReplicationServer/copyFiles',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyFiles.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.FromString,
                )
        self.newNRTPoint = channel.unary_unary(
                '/luceneserver.ReplicationServer/newNRTPoint',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.NewNRTPoint.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.FromString,
                )
        self.writeNRTPoint = channel.unary_unary(
                '/luceneserver.ReplicationServer/writeNRTPoint',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndexName.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SearcherVersion.FromString,
                )
        self.getCurrentSearcherVersion = channel.unary_unary(
                '/luceneserver.ReplicationServer/getCurrentSearcherVersion',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndexName.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SearcherVersion.FromString,
                )
        self.getConnectedNodes = channel.unary_unary(
                '/luceneserver.ReplicationServer/getConnectedNodes',
                request_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetNodesRequest.SerializeToString,
                response_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetNodesResponse.FromString,
                )


class ReplicationServerServicer(object):
    """The ReplicationServer service definition.
    """

    def addReplicas(self, request, context):
        """Issued by replica on primary node when it comes up 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recvCopyState(self, request, context):
        """Issued by replica to receive CopyState from primary 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendRawFile(self, request_iterator, context):
        """Send a file as a stream in chunks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recvRawFile(self, request, context):
        """Receives a file as a stream in chunks. Typically issued by replica on primary 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def recvRawFileV2(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def copyFiles(self, request, context):
        """Issued by primary on replica to inform it to start copying files either pre-warming (new merged segments) or when replica comes up first time 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def newNRTPoint(self, request, context):
        """Invoked externally to replica, to notify it that a new NRT point was just created on the primary 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def writeNRTPoint(self, request, context):
        """* Invoked externally to primary, to make all recent index operations searchable on the primary and, once copying is done, on the replicas 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getCurrentSearcherVersion(self, request, context):
        """* Invoked externally to replica, to get the current Searcher version on replica.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getConnectedNodes(self, request, context):
        """* Invoked externally on primary to find the list of replica nodes this node is connected to for binary replication per index 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicationServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'addReplicas': grpc.unary_unary_rpc_method_handler(
                    servicer.addReplicas,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddReplicaRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.AddReplicaResponse.SerializeToString,
            ),
            'recvCopyState': grpc.unary_unary_rpc_method_handler(
                    servicer.recvCopyState,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyStateRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyState.SerializeToString,
            ),
            'sendRawFile': grpc.stream_unary_rpc_method_handler(
                    servicer.sendRawFile,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.SerializeToString,
            ),
            'recvRawFile': grpc.unary_stream_rpc_method_handler(
                    servicer.recvRawFile,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FileInfo.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.SerializeToString,
            ),
            'recvRawFileV2': grpc.stream_stream_rpc_method_handler(
                    servicer.recvRawFileV2,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.FileInfo.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.SerializeToString,
            ),
            'copyFiles': grpc.unary_stream_rpc_method_handler(
                    servicer.copyFiles,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyFiles.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.SerializeToString,
            ),
            'newNRTPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.newNRTPoint,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.NewNRTPoint.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.SerializeToString,
            ),
            'writeNRTPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.writeNRTPoint,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndexName.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SearcherVersion.SerializeToString,
            ),
            'getCurrentSearcherVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentSearcherVersion,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.IndexName.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.SearcherVersion.SerializeToString,
            ),
            'getConnectedNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.getConnectedNodes,
                    request_deserializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetNodesRequest.FromString,
                    response_serializer=yelp_dot_nrtsearch_dot_luceneserver__pb2.GetNodesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'luceneserver.ReplicationServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReplicationServer(object):
    """The ReplicationServer service definition.
    """

    @staticmethod
    def addReplicas(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.ReplicationServer/addReplicas',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.AddReplicaRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.AddReplicaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recvCopyState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.ReplicationServer/recvCopyState',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyStateRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendRawFile(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/luceneserver.ReplicationServer/sendRawFile',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recvRawFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/luceneserver.ReplicationServer/recvRawFile',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.FileInfo.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def recvRawFileV2(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/luceneserver.ReplicationServer/recvRawFileV2',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.FileInfo.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.RawFileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def copyFiles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/luceneserver.ReplicationServer/copyFiles',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.CopyFiles.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def newNRTPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.ReplicationServer/newNRTPoint',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.NewNRTPoint.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.TransferStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def writeNRTPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.ReplicationServer/writeNRTPoint',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.IndexName.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.SearcherVersion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getCurrentSearcherVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.ReplicationServer/getCurrentSearcherVersion',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.IndexName.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.SearcherVersion.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getConnectedNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/luceneserver.ReplicationServer/getConnectedNodes',
            yelp_dot_nrtsearch_dot_luceneserver__pb2.GetNodesRequest.SerializeToString,
            yelp_dot_nrtsearch_dot_luceneserver__pb2.GetNodesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
